import typing


# {0: [input0, output0],
#  1: [input1, output1],
# ...}
gobyexample: typing.Dict[int, typing.List[str]] = {
    0: [
        '#include <iostream>\n'
        '\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n' 
        '    channel1 <- str;\n' 
        '}\n' 
        '\n' 
        'void main() {\n' 
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        '    msg <- channel1;\n'
        '    cout << msg;\n'
        '}\n',

        '#include <iostream>\n'
        '\n'
        '#include "AUTOGENERATED.h"\n'
        '\n\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n'
        'channel1.write(str, false);\n'
        '}\n'
        '\n'
        'void main() {\n'
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        'channel1.read(&msg, false);\n'
        '    cout << msg;\n'
        '}\n'
    ],
    1: [
        '#include <iostream>\n'
        '\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n' 
        '    channel1 <- str;\n' 
        '}\n' 
        '\n' 
        'void main() {\n' 
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        '    <- channel1;\n'
        '    cout << msg;\n'
        '}\n',

        '#include <iostream>\n'
        '\n'
        '#include "AUTOGENERATED.h"\n'
        '\n\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n'
        'channel1.write(str, false);\n'
        '}\n'
        '\n'
        'void main() {\n'
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        'channel1.read(nullptr, false);\n'
        '    cout << msg;\n'
        '}\n'
    ],
    # https://gobyexample.com/channel-directions not supported
    2: [
        '#include <iostream>\n'
        '#include "common/Utils.h"\n'
        '#include "common/ChannelUnbounded.h"\n'
        '#include "common/ChannelBounded.h"\n'
        '\n'
        'struct MyStruct\n'
        '{\n'
        '   float x, y;\n'
        '};\n'
        '\n'
        'void runSelectExample()\n'
        '{\n'
        '   ChannelUnbounded<std::string, 100> channel1;\n'
        '   ChannelUnbounded<int, 50>    channel2;\n'
        '   ChannelUnbounded<bool, 10>   channel_GuiSim;\n'
        '   ChannelBounded<MyStruct> channel_commTest;\n'
        '\n'
        '   select {\n'
        '       case message1 <- channel1:\n'
        '       {\n'
        '           printf("1");\n'
        '       }\n'
        '       case message2 <- channel2:\n'
        '       {\n'
        '           printf("2");\n'
        '       }\n'
        '       case channel3 <- message3: // Note that this is a write instruction !!\n'
        '       {\n'
        '           printf("Succeeded to write on channel 3\n");\n'
        '       }\n'
        '\n'
        '       case <- channel_GuiSim:\n'
        '       {\n'
        '           printf("Gui");\n'
        '       }\n'
        '       default:\n'
        '       {\n'
        '           print("nothing");\n'
        '       }\n'
        '   }\n'
        '}\n'
        'int main()\n'
        '{\n'
        '   RndUtils::initRandomGen(false);\n'
        '   runSelectExample();\n'
        '   return 0;\n'
        '}\n',

        '#include <iostream>\n'
        '#include "common/Utils.h"\n'
        '#include "common/ChannelUnbounded.h"\n'
        '#include "common/ChannelBounded.h"\n'
        '\n'
        '#include "AUTOGENERATED.h"\n'
        '\n\n'
        'struct MyStruct\n'
        '{\n'
        '   float x, y;\n'
        '};\n'
        '\n'
        'void runSelectExample()\n'
        '{\n'
        '   ChannelUnbounded<std::string, 100> channel1;\n'
        '   ChannelUnbounded<int, 50>    channel2;\n'
        '   ChannelUnbounded<bool, 10>   channel_GuiSim;\n'
        '   ChannelBounded<MyStruct> channel_commTest;\n'
        '\n'
        'select_0(channel1, true, message1, channel2, true, message2, channel3, false, message3, channel_GuiSim, true, nullptr);}\n'
        'int main()\n'
        '{\n'
        '   RndUtils::initRandomGen(false);\n'
        '   runSelectExample();\n'
        '   return 0;\n'
        '}\n'
    ], 
    3: [
        '#include <iostream>\n'
        '#include <string>\n'
        '\n'
        'using namespace std;\n'
        '\n'
        '\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'vector<string> googleParallel2(string query) {\n'
        '   channel1 <- getWeb(query);\n'
        '   channel1 <- getImage(query);\n'
        '   channel1 <- getVideo(query);\n'
        '   string result;\n'
        '   vector<string> results;\n' 
        '\n'
        '   for (int i = 0; i < 3; i++) {\n'
        '       select {\n'
        '	        case result <- channel1:\n'
        '	        {\n'
        '		        results.push_back(result);\n'
        '	        }\n'
        '	        case <- std::this_thread::sleep_for(std::chrono::seconds(5)):\n'
        '	        {\n'
        '		        return results;\n'
        '	        }\n'
        '       }\n'
        '   }\n'
        '\n'
        '   return results;\n'
        '}\n', 
        '#include <iostream>\n'
        '#include <string>\n'
        '\n'
        '#include "AUTOGENERATED.h"\n'
        '\n'
        '\n'
        'using namespace std;\n'
        '\n'
        '\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'vector<string> googleParallel2(string query) {\n'
        'channel1.write(getWeb(query), false);\n'
        'channel1.write(getImage(query), false);\n'
        'channel1.write(getVideo(query), false);\n'
        '   string result;\n'
        '   vector<string> results;\n'
        '\n'
        '   for (int i = 0; i < 3; i++) {\n'
        'select_0(channel1, true, result, nullptr, false, std::this_thread::sleep_for(std::chrono::seconds(5)));   }\n'
        '\n'
        '   return results;\n'
        '}\n'
    ]
}
