from py._path import local
import typing

import pytest

from .parser_select import CppGenerator, SelectParser, HeaderGenerator


def test_parser_select_general_case_overall() -> None:
    parser = SelectParser("SelectTest.cpp")
    assert parser.parse() == [
        [
            (
                'message1',
                'channel1',
                '        {\n            printf("1");\n        }   \n'
            ),
            (
                'message2',
                'channel2',
                '        {\n            printf("2");\n        }\n'
            ),
            (
                'channel3',
                'message3',
                '        {\n            printf("Succeeded to write on channel '
                '3\\n");\n        }\n'
            ),
            (
                None,
                'channel_GuiSim',
                '        {\n            printf("Gui");\n        }\n'
            ),
            (
                None,
                'default',
                '        {\n            print ("nothing");\n        }\n'
            )
        ]
    ]

def test_tmpdir(tmpdir: local.LocalPath) -> None:
    file_name: str = "hello.cpp"
    file_content: str = "#include <iostream>"
    p = tmpdir.join(file_name)
    p.write(file_content)

    assert tmpdir.join(file_name).isfile()
    assert p.read() == file_content


def _get_file_name() -> str:
    return "hello.cpp"


def _get_file_path(tmpdir: local.LocalPath) -> str:
    return str(tmpdir.join(_get_file_name()))


def _add_content(tmpdir: local.LocalPath, content: str) -> local.LocalPath:
    p = tmpdir.join(_get_file_name())
    p.write_text(content, encoding="utf-16-le")
    return p


def test_empty_content(tmpdir: local.LocalPath) -> None:
    _add_content(tmpdir, "#include <iostream>\n")
    select_data = SelectParser(_get_file_path(tmpdir)).parse()
    assert select_data == []


@pytest.fixture
def cpp_includes() -> str:
    return '#include <iostream>\n' \
           '\n' \
           'using namespace std;\n' \
           '\n' \


def test_empty_select(tmpdir: local.LocalPath, cpp_includes: str) -> None:
    _add_content(tmpdir, cpp_includes +
                         "int main() {\n"
                         "  select {\n"
                         "  }\n"
                         "}\n")
    select_data = SelectParser(_get_file_path(tmpdir)).parse()
    assert select_data == [[]]


def test_select_with_one_case(tmpdir: local.LocalPath, cpp_includes: str) -> None:
    _add_content(tmpdir, cpp_includes +
                         'int main() {\n'
                         '    select {\n' +
                         '      case message1 <- channel1:\n'
                         '      {\n'
                         '          std::cout << "1";\n'
                         '          std::cout << "2";\n'
                         '      }\n'
                         '  }\n'
                         '}\n')
    select_data = SelectParser(_get_file_path(tmpdir)).parse()
    assert select_data == [
        [
            (
                'message1',
                'channel1',
                '      {\n'
                '          std::cout << "1";\n'
                '          std::cout << "2";\n'
                '      }\n'
            )
        ]
    ]


def test_select_with_just_one_default(tmpdir: local.LocalPath, cpp_includes: str) -> None:
    _add_content(tmpdir, cpp_includes +
                         'int main() {\n'
                         '    select {\n' +
                         '      default:\n'
                         '      {\n'
                         '          std::cout << "1";\n'
                         '          std::cout << "2";\n'
                         '      }\n'
                         '  }\n'
                         '}\n')
    select_data = SelectParser(_get_file_path(tmpdir)).parse()
    assert select_data == [
        [
            (
                 None,
                'default',
                '      {\n'
                '          std::cout << "1";\n'
                '          std::cout << "2";\n'
                '      }\n'
            )
        ]
    ]


def test_header_generator_general_case_overall() -> None:
    parser = SelectParser("SelectTest.cpp")
    select_data: typing.List[SelectParser.SelectContent] = parser.parse()
    HeaderGenerator.generate(select_data)

    verified: bool = False
    with open("AUTOGENERATED.h", "r") as generated:
        with open("AUTOGENERATED_ok_test.h", "r") as content:
            assert generated.read() == content.read()
            assert generated.readlines() == content.readlines()
            verified = True
    assert verified


def _get_generated_file_name() -> str:
    return _get_file_name().split(".cpp")[0] + "_generated.cpp"


def test_cpp_generator_puts_autogenerated_header(tmpdir: local.LocalPath, cpp_includes: str) -> None:
    _add_content(tmpdir, cpp_includes)
    CppGenerator(_get_file_path(tmpdir)).generate()
    verified: bool = False
    with open(tmpdir.join(_get_generated_file_name()), "r") as f:
        assert f.read() == '#include <iostream>\n\n#include "AUTOGENERATED.h"\n\n\nusing namespace std;\n\n'
        verified = True
    assert verified

def test_cpp_generator_general_overall_case() -> None:
    select_data = SelectParser("SelectTest.cpp").parse()

    HeaderGenerator.generate(select_data)
    CppGenerator("SelectTest.cpp").generate()

    verified: bool = False
    with open("SelectTest_generated.cpp", "r") as generated:
        with open("SelectTest_generated_ok_test.cpp", "r") as content:
            assert generated.read() == content.read()
            assert generated.readlines() == content.readlines()
            verified = True
    assert verified


# {0: [input0, output0],
#  1: [input1, output1],
# ...}
gobyexample: typing.Dict[int, typing.List[str]] = {
    0: [
        '#include <iostream>\n'
        '\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n' 
        '    channel1 <- str;\n' 
        '}\n' 
        '\n' 
        'void main() {\n' 
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        '    msg <- channel1;\n'
        '    cout << msg;\n'
        '}\n',

        '#include <iostream>\n'
        '\n'
        '#include "AUTOGENERATED.h"\n'
        '\n\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n'
        'channel1.write(str, false);\n'
        '}\n'
        '\n'
        'void main() {\n'
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        'channel1.read(&msg, false);\n'
        '    cout << msg;\n'
        '}\n'
    ],
    1: [
        '#include <iostream>\n'
        '\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n' 
        '    channel1 <- str;\n' 
        '}\n' 
        '\n' 
        'void main() {\n' 
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        '    <- channel1;\n'
        '    cout << msg;\n'
        '}\n',

        '#include <iostream>\n'
        '\n'
        '#include "AUTOGENERATED.h"\n'
        '\n\n'
        'ChannelBounded<std::string> channel1;\n'
        '\n'
        'void func() {\n'
        '    std::string str = "ping";\n'
        'channel1.write(str, false);\n'
        '}\n'
        '\n'
        'void main() {\n'
        '    std::thread t1(func); \n'
        '    std::string msg;\n'
        '    t1.run();\n'
        'channel1.read(nullptr, false);\n'
        '    cout << msg;\n'
        '}\n'
    ]
}


@pytest.mark.parametrize("index_example", list(range(len(gobyexample))))
def test_cpp_generator_channel_outside_select_case_write(tmpdir: local.LocalPath, index_example: int) -> None:
    index_input: int = 0
    index_output: int = 1

    _add_content(tmpdir, gobyexample[index_example][index_input])
    select_data = SelectParser(_get_file_path(tmpdir)).parse()

    HeaderGenerator.generate(select_data)
    CppGenerator(_get_file_path(tmpdir)).generate()

    verified: bool = False
    with open(tmpdir.join(_get_generated_file_name()), "r") as generated:
        assert generated.read() == gobyexample[index_example][index_output]
        verified = True
    assert verified

